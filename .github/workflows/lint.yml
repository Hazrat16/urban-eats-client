name: CI checks
on:
  push:
    branches:
      - "feature/*"
  pull_request:
    branches:
      - "dev"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      - name: Install dependencies
        run: |
          npm install

      - name: Fetch all branches
        run: git fetch --all

      - name: Determine changed files
        id: changed-files
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_BRANCH="${{ github.event.pull_request.base.sha }}"
            HEAD_BRANCH="${{ github.event.pull_request.head.sha }}"
            CHANGED_FILES=$(git diff --name-only "$BASE_BRANCH" "$HEAD_BRANCH" | grep -E '\.jsx?$')
          else
            # For push events, we assume comparing against the previous commit
            BASE_BRANCH="HEAD^"
            HEAD_BRANCH="HEAD"
            CHANGED_FILES=$(git diff --name-only "$BASE_BRANCH" "$HEAD_BRANCH" | grep -E '\.jsx?$')
          fi

          # Trim "urban-eats-client/" prefix from file paths
          CHANGED_FILES=$(echo "$CHANGED_FILES" | sed 's|^urban-eats-client/||')

          # Convert newline separated list of files to space-separated list
          CHANGED_FILES=$(echo "$CHANGED_FILES" | tr '\n' ' ')

          echo "CHANGED_FILES=$CHANGED_FILES" >> $GITHUB_ENV
        shell: bash

      - name: Verify file existence
        run: |
          echo "Verifying file existence..."
          pwd
          echo "$CHANGED_FILES" | while read -r file; do
            if [ -f "$file" ]; then
              echo "$file exists"
            else
              echo "$file does not exist"
            fi
          done
        env:
          CHANGED_FILES: ${{ env.CHANGED_FILES }}

      - name: Run lint on changed files
        run: |
          pwd
          if [ -n "$CHANGED_FILES" ]; then
            echo "$CHANGED_FILES" | tr ' ' '\n' > changed_files.txt
            echo "Linting the following files:"
            cat changed_files.txt
            # Initialize exit code
            LINT_EXIT_CODE=0
            while IFS= read -r file; do
              if [ -f "$file" ]; then
                echo "Linting $file"
                ./node_modules/.bin/eslint "$file" --report-unused-disable-directives --max-warnings 0 || LINT_EXIT_CODE=$?
              else
                echo "$file does not exist"
              fi
            done < changed_files.txt
            # Exit with the combined exit code
            exit $LINT_EXIT_CODE
          else
            echo "No JavaScript/JSX files were changed."
          fi
        env:
          CHANGED_FILES: ${{ env.CHANGED_FILES }}
